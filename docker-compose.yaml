networks:
  app-network:
    driver: ${NETWORK_APP_DRIVER}
  kafka-network:
    driver: ${NETWORK_KAFKA_DRIVER}

services:
  # Redis Service
  redis:
    image: ${REDIS_IMAGE}
    container_name: redis
    restart: always
    command: >
      sh -c "
      redis-server 
      --requirepass ${REDIS_PASSWORD} 
      --user ${REDIS_USERNAME} on '>${REDIS_USER_PASSWORD}' '~*' '&*' '+@all'
      "
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--user", "${REDIS_USERNAME}", "--pass", "${REDIS_USER_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # MongoDB Service
  mongodb:
    image: ${MONGODB_IMAGE}
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  # PostgreSQL Service
  postgres:
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka-ui:
    container_name: kafka-ui
    image: ${KAFKA_UI_IMAGE}
    ports:
      - "${KAFKA_UI_PORT}:8080"
    depends_on:
      kafka0:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      schema-registry0:
        condition: service_healthy
      kafka-connect0:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka0:29092,kafka1:29092'
      KAFKA_CLUSTERS_0_METRICS_PORT: ${KAFKA0_JMX_PORT}
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: 'http://schema-registry0:8085'
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: 'http://kafka-connect0:8083'
      DYNAMIC_CONFIG_ENABLED: 'true'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://kafka-ui:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - kafka-network

  kafka0:
    image: ${KAFKA_IMAGE}
    hostname: kafka0
    container_name: kafka0
    ports:
      - "${KAFKA0_PORT}:9092"
      - "${KAFKA0_JMX_PORT}:9997"
    environment:
      CLUSTER_ID: '${KAFKA_CLUSTER_ID}'
      KAFKA_BROKER_ID: 0
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: ${KAFKA0_JMX_PORT}
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=${KAFKA0_JMX_PORT}
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 0
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka0:29093,1@kafka1:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - ./scripts/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka0:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - kafka-network

  kafka1:
    image: ${KAFKA_IMAGE}
    hostname: kafka1
    container_name: kafka1
    ports:
      - "${KAFKA1_PORT}:9092"
      - "${KAFKA1_JMX_PORT}:9998"
    environment:
      CLUSTER_ID: '${KAFKA_CLUSTER_ID}'
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: ${KAFKA1_JMX_PORT}
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1 -Dcom.sun.management.jmxremote.rmi.port=${KAFKA1_JMX_PORT}
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@kafka0:29093,1@kafka1:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:29092,CONTROLLER://kafka1:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    volumes:
      - ./scripts/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka1:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - kafka-network

  schema-registry0:
    image: ${SCHEMA_REGISTRY_IMAGE}
    container_name: schema-registry0
    ports:
      - "${SCHEMA_REGISTRY0_PORT}:8085"
    depends_on:
      kafka0:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka0:29092,PLAINTEXT://kafka1:29092'
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: 'PLAINTEXT'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry0
      SCHEMA_REGISTRY_LISTENERS: 'http://schema-registry0:8085'
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
    healthcheck:
      test: ["CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry0:8085/subjects"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - kafka-network

  kafka-connect0:
    image: ${KAFKA_CONNECT_IMAGE}
    container_name: kafka-connect0
    ports:
      - "${KAFKA_CONNECT_PORT}:8083"
    depends_on:
      kafka0:
        condition: service_healthy
      schema-registry0:
        condition: service_healthy
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka0:29092,kafka1:29092'
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry0:8085'
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry0:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect0
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://kafka-connect0:8083/connectors" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - kafka-network

  app:
    image: ${APP_IMAGE}
    container_name: app
    ports:
      - "${APP_PORT}:8081"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 'kafka0:29092, kafka1:29092'
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/${POSTGRES_DB}'
      SPRING_DATASOURCE_USERNAME: '${POSTGRES_USER}'
      SPRING_DATASOURCE_PASSWORD: '${POSTGRES_PASSWORD}'
      SPRING_DATA_MONGODB_URI: 'mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?authSource=admin'
      SPRING_DATA_MONGODB_DATABASE: '${MONGODB_DATABASE}'
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: '${REDIS_PORT}'
      SPRING_DATA_REDIS_USERNAME: '${REDIS_USERNAME}'
      SPRING_DATA_REDIS_USER_PASSWORD: '${REDIS_USER_PASSWORD}'
      SPRING_KAFKA_CONSUMER_GROUP_ID: cleaning-service-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_PROPERTIES_SCHEMA_REGISTRY_URL: 'http://schema-registry0:8085'
      SPRING_DOCKER_COMPOSE_ENABLED: '${SPRING_DOCKER_COMPOSE_ENABLED}'
      SERVER_SERVLET_CONTEXT_PATH: '${SERVER_SERVLET_CONTEXT_PATH}'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka0:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      schema-registry0:
        condition: service_healthy
      kafka-connect0:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://app:8081${SERVER_SERVLET_CONTEXT_PATH}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - kafka-network
      - app-network

volumes:
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  postgres_data:
    driver: local